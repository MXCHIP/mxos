#
#  UNPUBLISHED PROPRIETARY SOURCE CODE
#  Copyright (c) 2016 MXCHIP Inc.
#
#  The contents of this file may not be disclosed to third parties, copied or
#  duplicated in any form, in whole or in part, without the prior written
#  permission of MXCHIP Corporation.
#
# script for stm32f4xx

source [find mxos/makefiles/OpenOCD/interface/swj-dp.tcl]
source [find mxos/makefiles/OpenOCD/mem_helper.tcl]

set CHIP_FLASH_START 0x08000000
set CHIP_RAM_START   0x20000000

#1K bytes for mbed dynamic vector
set CHIP_PROG_CODE_START   0x20000400  

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32f4x
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 64kB
if { [info exists WORKAREASIZE] } {
   set  _WORKAREASIZE $WORKAREASIZE
} else {
   set  _WORKAREASIZE 0x10000
}

# JTAG speed should be <= F_CPU/6. F_CPU after reset is 16MHz, so use F_JTAG = 1MHz
#
# Since we may be running of an RC oscilator, we crank down the speed a
# bit more to be on the safe side. Perhaps superstition, but if are
# running off a crystal, we can run closer to the limit. Note
# that there can be a pretty wide band where things are more or less stable.
adapter_khz 10000

adapter_nsrst_delay 100
if {[using_jtag]} {
 jtag_ntrst_delay 100
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      # See STM Document RM0090
      # Section 38.6.3 - corresponds to Cortex-M4 r0p1
      set _CPUTAPID 0x4ba00477
   } {
      set _CPUTAPID 0x2ba01477
   }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

if { [info exists BSTAPID] } {
   set _BSTAPID $BSTAPID
} else {
  # See STM Document RM0090
  # Section 38.6.2
  # STM32F405xx/07xx and STM32F415xx/17xx
  set _BSTAPID1 0x06413041
  # STM32F42xxx and STM32F43xxx
  set _BSTAPID2 0x06419041
  # See STM Document RM0368 (Rev. 3)
  # STM32F401B/C
  set _BSTAPID3 0x06423041
  # STM32F401D/E
  set _BSTAPID4 0x06433041
  # See STM Document RM0383 (Rev 2)
  # STM32F411
  set _BSTAPID5 0x06431041
}

if {[using_jtag]} {
 swj_newdap $_CHIPNAME bs -irlen 5 -expected-id $_BSTAPID1 \
     -expected-id $_BSTAPID2 -expected-id $_BSTAPID3 \
     -expected-id $_BSTAPID4 -expected-id $_BSTAPID5
}

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -chain-position $_TARGETNAME -rtos auto
$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

#Reset target when gdb attaches
$_TARGETNAME configure -event gdb-attach { reset halt; sleep 1; mww 0xE0042004 3; mww 0xE0042008 0xffffffff }

#shutdown OpenOCD daemon when gdb detaches
$_TARGETNAME configure -event gdb-detach { mww 0xE0042008 0x00000000; reset halt; sleep 5; resume; shutdown }

set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME stm32f2x 0 0 0 0 $_TARGETNAME

# if srst is not fitted use SYSRESETREQ to
# perform a soft reset
#cortex_m3 reset_config srst

################################################################################

adapter_nsrst_delay 100
if {[using_jtag]} {
 jtag_ntrst_delay 100
}

reset_config srst_nogate

if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

$_TARGETNAME configure -event examine-end {
	# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP
	mmw 0xE0042004 0x00000007 0

	# Stop watchdog counters during halt
	# DBGMCU_APB1_FZ = DBG_IWDG_STOP | DBG_WWDG_STOP
	mww 0xE0042008 0x00001800
}

$_TARGETNAME configure -event trace-config {
	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
	# change this value accordingly to configure trace pins
	# assignment
	mmw 0xE0042004 0x00000020 0
}

proc jtag_init {} {
    global _TARGETNAME

    # assert both resets; equivalent to power-on reset
    jtag_reset 1 1
    sleep 1
    jtag_reset 0 1

    # Examine scanchain
    jtag arp_init

    $_TARGETNAME arp_examine

    # Force STM32 to allow debugging whilst sleeping and in stop-mode
    mww 0xE0042004 3

    # Set flags to cause timer based peripherals to stop during breakpoints.
    mww 0xE0042008 0xffffffff


    reset halt
    poll on
}

